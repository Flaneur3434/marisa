#+STARTUP: overview
#+TITLE: Marisa
#+LANGUAGE: en
#+OPTIONS: num:nil
Emacs - Connect To The Wired Edition

[[./athos_monk_emacs.png]]
* Introduction
Based off of Witchmacs(https://github.com/snackon/Witchmacs)
How to download
#+BEGIN_SRC bash
  git clone https://github.com/GrapeJuiceSoda/marisa .emacs.d
  cd .emacs.d
  git submodule update --init
  # requires sregx (https://github.com/zyedidia/sregx)
  # requires fzy (https://github.com/jhawthorn/fzy)
  ./update-git-packages.sh --init
  ./update-git-packages.sh --update
  # you may need to run package-refresh-contents in emacs also
#+END_SRC
* Why would I use this?
#+BEGIN_QUOTE
A very basic config (KISS!)
#+END_QUOTE
I used Witchmacs because as opposed to many other Emacs distributions, Witchmacs has ZERO customization layers which means you can just jump in, look at the config file and start editing away!
After all, Emacs works best when it's customized to your own liking!
* Dependencies
=clang= as backend for C and C++ autocompletion

=llvm= to install irony server

(optional) =mvn= maven for java project handling through =meghanada=
* QoL section
Minor quality-of-life modifications for a more pleasant Emacs experience
** Enable line numbers
*** Use relative line number
#+BEGIN_SRC emacs-lisp

  (global-display-line-numbers-mode)
#+END_SRC
*** Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview
or ansi-term) so I utilize the approach of only enabling it on some major modes
rather than globally
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (progn
                                (display-line-numbers-mode)
                                (setq display-line-numbers 'relative))))
  (add-hook 'text-mode-hook (lambda ()
                              (progn
                                (display-line-numbers-mode)
                                (setq display-line-numbers 'relative))))
#+END_SRC
*** Use absolute line numbers even when buffer is narrowed.
#+BEGIN_SRC emacs-lisp
  ;; (customize-set-variable 'display-line-numbers-widen t)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 0)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  ;; Selecting sets primary clipboard.
  (setq select-enable-primary t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable smooth scrolling and inplace scrolling
scrolling
#+BEGIN_SRC emacs-lisp
  ;; Fully redraw the display before it processes queued input events.
  (setq redisplay-dont-pause t)
  ;; The text on the screen should always be fontified, no delay
  (setq jit-lock-defer-time 0)
  ;; Number of lines of continuity to retain when scrolling by full screens
  (setq next-screen-context-lines 2)
  ;; only 'jump' when moving this far off the screen
  (setq scroll-conservatively 10000)
  ;; Keyboard scroll one line at a time
  (setq scroll-step 1)
  ;; Don't accelerate scrolling
  (setq mouse-wheel-progressive-speed nil)
  ;; Scroll window under mouse
  (setq mouse-wheel-follow-mouse t)
  ;; No (less) lag while scrolling lots.
  (setq fast-but-imprecise-scrolling t)
  ;; Cursor move faster
  (setq auto-window-vscroll nil)

  (good-scroll-mode 1)
  (setq good-scroll-step 103)
  (setq good-scroll-render-rate 0.02)

  (inertias-global-minor-mode -1)
  ;; (setq inertias-global-minor-mode-map
  ;;       (inertias-define-keymap
  ;;        '(
  ;;          ;; Mouse wheel scrolling
  ;;          ("<wheel-up>"   . inertias-down-wheel)
  ;;          ("<wheel-down>" . inertias-up-wheel)
  ;;          ("<mouse-4>"    . inertias-down-wheel)
  ;;          ("<mouse-5>"    . inertias-up-wheel)
  ;;          ;; Scroll keys
  ;;          ("<next>"  . inertias-up)
  ;;          ("<prior>" . inertias-down)
  ;;          ("C-v"     . inertias-up)
  ;;          ("M-v"     . inertias-down))
  ;;        inertias-prefix-key))

  ;; (setq inertias-initial-velocity 20)
  ;; (setq inertias-friction 50)
  ;; (setq inertias-update-time 5)
  ;; (setq inertias-rest-coef 0.1)

  (smooth-scroll-mode -1)
  ;; (global-set-key (kbd "<down>") 'scroll-up-1)
  ;; (global-set-key (kbd "<up>") 'scroll-down-1)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Save position
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC
** Paragraph Filling
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode -1)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Defer loading most packages for quicker startup times
#+BEGIN_SRC emacs-lisp
 (setq use-package-always-defer t)
#+END_SRC
** Default encoding
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)
  (setq-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC
** Completion and Minibuffer settings
#+BEGIN_SRC emacs-lisp
  (setq read-file-name-completion-ignore-case t
        completion-ignore-case t
        read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t
        completion-show-inline-help nil
        completions-detailed t
        resize-mini-windows t
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion))))
  (minibuffer-depth-indicate-mode 1)
  (minibuffer-electric-default-mode 1)
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+END_SRC
** Delete trailing whitespace before saving a file
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Create an indirect buffer with narrow view
** Dired Qol
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
*** Create a new file from dired mode
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'dired
    '(progn
       (define-key dired-mode-map (kbd "c") 'my-dired-create-file)
       (defun create-new-file (file-list)
         (defun exsitp-untitled-x (file-list cnt)
           (while (and (car file-list) (not (string= (car file-list) (concat "untitled" (number-to-string cnt) ".txt"))))
             (setq file-list (cdr file-list)))
           (car file-list))

         (defun exsitp-untitled (file-list)
           (while (and (car file-list) (not (string= (car file-list) "untitled.txt")))
             (setq file-list (cdr file-list)))
           (car file-list))

         (if (not (exsitp-untitled file-list))
             "untitled.txt"
           (let ((cnt 2))
             (while (exsitp-untitled-x file-list cnt)
               (setq cnt (1+ cnt)))
             (concat "untitled" (number-to-string cnt) ".txt")
             )
           )
         )
       (defun my-dired-create-file (file)
         (interactive
          (list (read-file-name "Create file: " (concat (dired-current-directory) (create-new-file (directory-files (dired-current-directory))))))
          )
         (write-region "" nil (expand-file-name file) t)
         (dired-add-file file)
         (revert-buffer)
         (dired-goto-file (expand-file-name file))
         )
       )
    )
  #+END_SRC
*** Create a new window and open dired there
#+BEGIN_SRC emacs-lisp
    (defun my-display-buffer-below (buffer alist)
    "Doc-string."
      (let (
          (window
            (cond
              ((get-buffer-window buffer (selected-frame)))
              ((window-in-direction 'below))
              (t
                (split-window (selected-window) nil 'below)))))
        (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
        window))

    (defun my-display-buffer-above (buffer alist)
    "Doc-string."
      (let (
          (window
            (cond
              ((get-buffer-window buffer (selected-frame)))
              ((window-in-direction 'above))
              (t
                (split-window (selected-window) nil 'above)))))
        (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
        window))

    (defun my-display-buffer-left (buffer alist)
    "Doc-string."
      (let (
          (window
            (cond
              ((get-buffer-window buffer (selected-frame)))
              ((window-in-direction 'left))
              (t
                (split-window (selected-window) nil 'left)))))
        (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
        window))

    (defun my-display-buffer-right (buffer alist)
    "Doc-string."
      (let (
          (window
            (cond
              ((get-buffer-window buffer (selected-frame)))
              ((window-in-direction 'right))
              (t
                (split-window (selected-window) nil 'right)))))
        (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
        window))

    (defun dired-display-above ()
    "Doc-string."
    (interactive)
      (let* (
          (file-or-dir (dired-get-file-for-visit))
          (buffer (find-file-noselect file-or-dir)))
        (my-display-buffer-above buffer nil)))

    (defun dired-display-below ()
    "Doc-string."
    (interactive)
      (let* (
          (file-or-dir (dired-get-file-for-visit))
          (buffer (find-file-noselect file-or-dir)))
        (my-display-buffer-below buffer nil)))

    (defun dired-display-left ()
    "Doc-string."
    (interactive)
      (let* (
          (file-or-dir (dired-get-file-for-visit))
          (buffer (find-file-noselect file-or-dir)))
        (my-display-buffer-left buffer nil)))

    (defun dired-display-right ()
    "Doc-string."
    (interactive)
      (let* (
          (file-or-dir (dired-get-file-for-visit))
          (buffer (find-file-noselect file-or-dir)))
        (my-display-buffer-right buffer nil)))
  (define-key dired-mode-map (kbd "C-x i") 'dired-display-above)
  (define-key dired-mode-map (kbd "C-x k") 'dired-display-below)
  (define-key dired-mode-map (kbd "C-x j") 'dired-display-left)
  (define-key dired-mode-map (kbd "C-x l") 'dired-display-right)
#+END_SRC
*** Deleting dired buffer
**** Look under ibuffer
** Quickly access config.org and eval init.el
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun eval-init-file ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c r") 'eval-init-file)
#+END_SRC
** Diff Mode
#+BEGIN_SRC emacs-lisp
  (setq diff-default-read-only t)
  (setq diff-advance-after-apply-hunk t)
  (setq diff-update-on-the-fly t)
  (setq diff-refine nil)
  (setq diff-font-lock-prettify nil)
  (setq diff-font-lock-syntax 'hunk-also)
#+END_SRC
** Suspend Emacs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'ken_nc/suspend)
#+END_SRC
** General Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c z") 'remember)
  (global-set-key (kbd "C-c q") 'ken_nc/quit-emacs-dwim)
  (global-set-key (kbd "C-c t") 'ken_nc/create-tags)
  (global-set-key (kbd "M-i") 'move-text-up)
  (global-set-key (kbd "M-k") 'move-text-down)
  (global-set-key (kbd "M-RET") 'indent-new-comment-line)
  (global-set-key [mode-line C-mouse-1] 'tear-off-window)
  (global-set-key (kbd "C-c x") 'ken_nc/tear-off-window)
#+END_SRC
** CSS color coding
#+BEGIN_SRC emacs-lisp
  (defun xah-syntax-color-hex ()
    "Syntax color text of the form #ff1100 and #abc in current buffer.
  URL `http://ergoemacs.org/emacs/emacs_CSS_colors.html'
  Version 2017-03-12"
    (interactive)
    (font-lock-add-keywords
     nil
     '(("#[[:xdigit:]]\\{3\\}"
        (0 (put-text-property
            (match-beginning 0)
            (match-end 0)
            'face (list :background
                        (let* (
                               (ms (match-string-no-properties 0))
                               (r (substring ms 1 2))
                               (g (substring ms 2 3))
                               (b (substring ms 3 4)))
                          (concat "#" r r g g b b))))))
       ("#[[:xdigit:]]\\{6\\}"
        (0 (put-text-property
            (match-beginning 0)
            (match-end 0)
            'face (list :background (match-string-no-properties 0)))))))
    (font-lock-flush))
  (add-hook 'prog-mode-hook 'xah-syntax-color-hex)
  (add-hook 'conf-xdefaults-mode-hook 'xah-syntax-color-hex)
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
#+END_SRC
*** Dired sudo mode
You can also edit files in sudo mode with crux-edit-sudo
#+BEGIN_SRC emacs-lisp
  (defun sudired ()
    (interactive)
    (require 'tramp)
    (let ((dir (expand-file-name default-directory)))
      (if (string-match "^/sudo:" dir)
          (user-error "Already in sudo")
        (dired (concat "/sudo::" dir)))))
  (define-key dired-mode-map "!" 'sudired)
#+END_SRC
*** SSH editing with tramp
Others remote file editing packages use FTP to connect to the remote host and to transfer the files, TRAMP uses a remote shell connection (rlogin, telnet, ssh).
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
** Isearch functionality
The defualt functionality of isearch is to put the cursor after the last character searched. Thats bad usability. Changed so that the cusor is moved to the beginning of the match searched.
#+BEGIN_SRC emacs-lisp
  (defun my-goto-match-beginning ()
      (when (and isearch-forward isearch-other-end (not isearch-mode-end-hook-quit))
        (goto-char isearch-other-end)))
  (defadvice isearch-exit (after my-goto-match-beginning activate)
    "Go to beginning of match."
    (when (and isearch-forward isearch-other-end)
      (goto-char isearch-other-end)))
  (add-hook 'isearch-mode-end-hook 'my-goto-match-beginning)

  (setq search-whitespace-regexp ".*")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
#+END_SRC
** WGrep
WGrep allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively. No need to learn sed script, just learn Emacs.
Save buffer automatically when wgrep-finish-edit
#+BEGIN_SRC emacs-lisp
  (setq wgrep-auto-save-buffer t)
#+END_SRC
Change the default key binding to switch to wgrep
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-q") 'ken_nc/edit-buffer-dwim)
#+END_SRC
Default grep flags
#+BEGIN_SRC emacs-lisp
  (grep-apply-setting
   'grep-template
   "--color --ignore-case --line-number --with-filename --recursive --null --regexp")
#+END_SRC
** Emacs default completion for elisp
Emacs has its own built-in functionality which enables TAB completion for elisp
#+BEGIN_SRC emacs-lisp
  (setq-local tab-always-indent 'complete)
#+END_SRC
** Setup mouse click to highlight matching words
#+BEGIN_SRC emacs-lisp
  (defun ken_nc/find-word-on-click (event)
    (interactive "e")
    (let ((word-at-point  (posn-point (event-end event))))
      (goto-char word-at-point)
      (isearch-forward-symbol-at-point)))

  (global-set-key (kbd "<mouse-3>") 'ken_nc/find-word-on-click)
#+END_SRC
** Auto Complete in IELM
#+BEGIN_SRC emacs-lisp
  (defun ielm-auto-complete ()
    "Enables `auto-complete' support in \\[ielm]."
    (setq ac-sources '(ac-source-functions
                       ac-source-variables
                       ac-source-features
                       ac-source-symbols
                       ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
    (auto-complete-mode 1))
  (add-hook 'ielm-mode-hook 'ielm-auto-complete)
#+END_SRC
** Music in emacs
#+BEGIN_SRC emacs-lisp
  (setq
   mpc-browser-tags '(Artist Album)
   mpc-songs-format "%-5{Time} %25{Title} %20{Album} %20{Artist}")
#+END_SRC
** Mode line Customization
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'wc-mode)
  (add-hook 'prog-mode-hook 'wc-mode)
  (setq wc-modeline-format "[Words: %tw, Lines: %tl]")
#+END_SRC
** Popup window mode
Popwin is a popup window manager for Emacs which makes you free from the hell of annoying buffers such like *Help*, *Completions*, *compilation*, and etc.
#+BEGIN_SRC emacs-lisp
  (popwin-mode 1)
  (push '("*ag search*" :dedicated t :stick t) popwin:special-display-config)
  (push '("*Occur*" :dedicated t :stick t) popwin:special-display-config)
  (push '("*eshell*" :dedicated t :stick t) popwin:special-display-config)
  (push '("*eldoc*" :noselect t :position bottom) popwin:special-display-config)
  (push '(compilation-mode :noselect t :tail t) popwin:special-display-config)
  (push "*vc-diff*" popwin:special-display-config)
  (push "*vc-change-log*" popwin:special-display-config)
#+END_SRC
** Persistent undo
#+BEGIN_SRC emacs-lisp
  (undohist-initialize)
#+END_SRC
** Ligature
#+BEGIN_SRC emacs-lisp
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  (add-hook 'prog-mode-hook 'ligature-mode)
#+END_SRC
** Garbage Collection on focus-out
Garbage-collect on focus-out, Emacs should feel snappier overall.
Deprecated cause I am using GCMH
#+BEGIN_SRC emacs-lisp
  ;; (add-function :after after-focus-change-function
  ;;   (defun ken_nc/garbage-collect-maybe ()
  ;;     (unless (frame-focus-state)
  ;;       (garbage-collect))))
#+END_SRC
** Garbage Collection Magic Hack
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :ensure t
    :diminish gcmh-mode
    :init
    (gcmh-mode 1)
    :custom
    (gcmh-verbose t))
#+END_SRC
** Hungry-delete
*** Description
Using hungry-delete, one hit of delete-key eats the following white spaces and
new lines, or just delete one character. One hit of backspace-key eats the
preceding white spaces, or just delete one character.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
           ([remap delete-backward-char] . smart-hungry-delete-backward-char)
           ([remap delete-char] . smart-hungry-delete-forward-char))
    :init (smart-hungry-delete-add-default-hooks))
#+END_SRC
* Emacs Frame Customization
#+BEGIN_SRC emacs-lisp
  (push '(width . 100) default-frame-alist)
  (push '(height . 50) default-frame-alist)
  (push '(cursor-type . 'box) default-frame-alist)
  (push '(alpha . (100 95)) default-frame-alist)
  (push '(cursor-color . "white smoke") default-frame-alist)
  (push '(mouse-color . "white smoke") default-frame-alist)
  (push '(font . "Caskaydia Cove:size=14") default-frame-alist)
  (push '(alpha-background . 100) default-frame-alist)

  (setq initial-frame-alist default-frame-alist)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq frame-resize-pixelwise t)
#+END_SRC
* Emacs Daemon
Emacs frame settings that need to started when emacs is in daemon mode.
These include the frame (window) size, xah-fly-keys settings, and font settings.
#+BEGIN_SRC emacs-lisp
  (defun load-theme--disable-old-theme (theme &rest args)
    "Disable current theme before loading new one."
    (mapcar #'disable-theme custom-enabled-themes))
  (advice-add 'load-theme :before #'load-theme--disable-old-theme)

  (server-start)
#+END_SRC
* Emacs Modeline
#+BEGIN_SRC emacs-lisp
  (defun mode-line-fill (face reserve)
    "Return empty space using FACE and leaving RESERVE space on the right."
    (unless reserve
      (setq reserve 20))
    (when (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
                'display `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))
                'face face))

  (setq-default mode-line-format
                (list "%e"
                      mode-line-front-space
                      mode-line-mule-info
                      mode-line-client
                      mode-line-modified
                      mode-line-remote
                      mode-line-frame-identification
                      mode-line-buffer-identification
                      mode-line-position
                      mode-line-modes
                      mode-line-misc-info
                      mode-line-end-spaces
                      (mode-line-fill 'mode-line 10)
                      '(:eval (sky-color-clock))
                      ;;'(:eval (propertize "[☰]" 'local-map (make-mode-line-mouse-map 'mouse-1 'menu-bar-open)))
                      ))

  #+END_SRC
* Org mode
** Description
One of the main selling points of Emacs! no Emacs distribution is complete without sensible and well-defined org-mode defaults
** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)
                 (variable-pitch-mode 1)))
    (setq org-startup-folded t))

  (use-package org-indent-
    :diminish org-indent-mode)

  (set-face-attribute 'org-block nil
                      :background "#0a0a0a")
#+END_SRC
* Eshell
** Why Eshell?
We are using Emacs, so we might as well implement as many tools from our workflow into it as possible
*** Caveats
Eshell cannot handle ncurses programs and in certain interpreters (Python, GHCi) selecting previous commands does not work (for now). I recommend using eshell for light cli work, and using your external terminal emulator of choice for heavier tasks
** Settings
Both M-x shell-command and M-x compile execute commands in an inferior shell via call-process.
Change to use aliases found in login shell. Also disable internal elisp commands.
#+BEGIN_SRC emacs-lisp
  (setq shell-file-name "bash")
  (setq shell-command-switch "-ic")
  (setq eshell-prefer-lisp-functions t)

  ;; add environment variables to emacs environment
  (dolist (var '("BROWSER" "PLAN9"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize)
#+END_SRC
** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^λ\n]*[λ] ")
  (setq eshell-prompt-function
        (lambda nil
          (concat
           (if (string= (eshell/pwd) (getenv "HOME"))
               (propertize "~" 'face `(:foreground "#99CCFF"))
             (replace-regexp-in-string
              (getenv "HOME")
              (propertize "~" 'face `(:foreground "#99CCFF"))
              (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
           (if (= (user-uid) 0)
               (propertize " α " 'face `(:foreground "#FF6666"))
             (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
** Custom functions
*** Open files as root
#+BEGIN_SRC emacs-lisp
  (defun eshell/sudo-open (filename)
    "Open a file as root in Eshell."
    (let ((qual-filename (if (string-match "^/" filename)
                             filename
                           (concat (expand-file-name (eshell/pwd)) "/" filename))))
      (switch-to-buffer
       (find-file-noselect
        (concat "/sudo::" qual-filename)))))
#+END_SRC
*** Super - Control - RET to open eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (not (get-buffer "*eshell*"))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (eshell))
      (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell)
#+END_SRC
*** Parse Bash History
#+BEGIN_SRC emacs-lisp
  ;; (ken_nc/parse-bash-history)
#+END_SRC
* Use-package section
** Initialize =auto-package-update=
*** Description
Auto-package-update automatically updates and removes old packages
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** Initialize =which-key=
*** Description
Incredibly useful package; if you are in the middle of a command and don't know what to type next, just wait a second and you'll get a nice buffer with all possible completions
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    ;; loaded at early-init so i have to add this here
    (diminish 'gcmh-mode)
    (diminish 'xah-fly-keys-mode)
    (diminish 'buffer-face-mode)
    (diminish 'visual-line-mode))
#+END_SRC
** Initialize =dashboard=
*** Description
The frontend of Witchmacs; without this there'd be no Marisa in your Emacs startup screen
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :defer nil
    :ensure t
    :preface
    (defun update-config ()
      "Update Witchmacs to the latest version."
      (interactive)
      (let ((dir (expand-file-name user-emacs-directory)))
        (if (file-exists-p dir)
            (progn
              (message "Marisa is updating!")
              (cd dir)
              (shell-command "git pull")
              (message "Update finished. Switch to the messages buffer to see changes and then restart Emacs"))
          (message "\"%s\" doesn't exist." dir))))

    (defun create-scratch-buffer ()
      "Create a scratch buffer"
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "M A R I S A - Connect To The Wired Edition!")
    ;; (setq dashboard-startup-banner "~/.emacs.d/lain.png")
    (setq dashboard-startup-banner "~/.emacs.d/athos_monk_emacs.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-init-info (format "%d packages loaded in %s"
                                      (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer nil)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(;; line1
            ((,nil
              "Witchmacs on github"
              "Open Marisa on github"
              (lambda (&rest _) (browse-url "https://github.com/GrapeJuiceSoda/marisa"))
              'default)
             (nil
              "Witchmacs crash course"
              "Open Witchmacs' introduction to Emacs"
              (lambda (&rest _) (find-file "~/.emacs.d/Witcheat.org"))
              'default)
             (nil
              "Update Witchmacs"
              "Get the latest Witchmacs update. Check out the github commits for changes!"
              (lambda (&rest _) (update-config))
              'default)
             )
            ;; line 2
            ((,nil
              "Open scratch buffer"
              "Switch to the scratch buffer"
              (lambda (&rest _) (create-scratch-buffer))
              'default)
             (nil
              "Open config.org"
              "Open Marisa' configuration file for easy editing"
              (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
              'default)))))
#+END_SRC
*** Notes
If you pay close attention to the code in dashboard, you'll  notice that it uses custom functions defined under the :preface use-package block. I wrote all of those functions by looking at other people's Emacs distributions (Mainly [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]) and then experimenting and adapting them to Witchmacs. If you dig around, you'll find the same things I did - maybe even more!
*** Historical
22/05/19: On this day, the main maintainers of the dashboard package have added built-in fuinctionality to display init and package load time, thing that I already had implemented much earlier on my own. I have left here my implementation for historical purposes
#+BEGIN_SRC emacs-lisp
  ;(insert (concat
  ;         (propertize (format "%d packages loaded in %s"
  ;                             (length package-activated-list) (emacs-init-time))
  ;                     'face 'font-lock-comment-face)))
  ;
  ;(dashboard-center-line)
#+END_SRC
** Initialize =beacon=
*** Description
You might find beacon an unnecesary package but I find it very neat. It briefly highlights the cursor position when switching to a new window or buffer
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :init
    (beacon-mode -1))
#+END_SRC
** Initialize =htmlize=
*** Description
Highligh rgb and hex values with the color associated with them
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :defer t)
#+END_SRC
** Initialize =mozc=
*** 日本語入力
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package mozc
    :ensure t
    :defer t)
#+END_SRC
** Initialize =ido= and =ido-vertical=
*** Description
For the longest time I used the default way of switching and killing buffers in Emacs. Same for finding files. Ido-mode made these three tasks IMMENSELY easier and more intuitive. Please not that I still use the default way M - x works because I believe all you really need for it is which-key
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :defer t
    :init
    (ido-mode 1)
    :config
    (setq ido-enable-flex-matching nil)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t))

  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init
    (ido-vertical-mode 1))
  ; This enables arrow keys to select while in ido mode. If you want to
  ; instead use the default Emacs keybindings, change it to
  ; "'C-n-and-C-p-only"
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1))
#+END_SRC
** Initialize =page-break-lines=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =undo-tree=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode)
#+END_SRC
** Initialize =crux=
*** Description
A Collection of Ridiculously Useful eXtensions for Emac
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t)
#+END_SRC
** Initialize =dired-toggle-sudo=
*** Code
Allow to switch from current user to sudo when browsind `dired' buffers.
#+BEGIN_SRC emacs-lisp
  (use-package dired-toggle-sudo
    :ensure t
    :defer t)
#+END_SRC
** Initialize =magit=
*** Description
Git porcelain for Emacs
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+END_SRC
** Initialize =expand-region=
*** Description
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("<mouse-2>" . er/expand-region))
#+END_SRC
** Initialize =highlight=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package highlight
    :ensure t)
#+END_SRC
** Initialize =ag=
#+BEGIN_SRC emacs-lisp
  (setq ag-highlight-search t)
  (setq ag-executable "/usr/bin/ag")
  (setq ag-reuse-buffers t)
  ;; (add-hook 'ag-mode-hook 'next-error-follow-minor-mode)
#+END_SRC
** Initialize =company-ctags=
#+BEGIN_SRC emacs-lisp
  (use-package company-ctags
    :defer t
    :load-path "lisp/company-ctags"
    :commands (company-ctags))
#+END_SRC
** Initialize =wrap-region=
Wrap Region is a minor mode for Emacs that wraps a region with punctuations. For
"tagged" markup modes, such as HTML and XML, it wraps with tags.
#+BEGIN_SRC emacs-lisp
       (wrap-region-add-wrappers
        '(("<" ">")
          ("'" "'")
          ("/* " " */" "#" (java-mode c-mode css-mode go-mode))))
#+END_SRC
** Initialize =sky-color-clock=
#+BEGIN_SRC emacs-lisp
  (sky-color-clock-initialize 38)  ;; california
  (setq sky-color-clock-format "%H:%M")
  (setq sky-color-clock-enable-emoji-icon nil)
#+END_SRC
** Initialize =eyebrowse=
*** Description
Eyebrowse is a global minor mode for Emacs that allows you to manage your window
configurations in a simple manner, just like tiling window managers like i3wm
with their workspaces do.
*** Code
#+BEGIN_SRC emacs-lisp
  (eyebrowse-mode t)
#+END_SRC
** Initialize =pulsar=
*** Description
Pulse highlight line on demand or after running select functions
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package pulsar
    :ensure t
    :diminish pulsar-mode
    :hook
    (next-error-hook . pulsar-pulse-line)
    (find-file-hook . pulsar-pulse-line)
    :init
    (pulsar-global-mode 1)
    :config
    (setq pulsar-pulse-on-window-change t
          pulsar-pulse t
          pulsar-delay 0.05
          pulsar-iterations 10
          pulsar-face 'pulsar-cyan
          pulsar-pulse-functions
          '(recenter-top-bottom
            move-to-window-line-top-bottom
            scroll-up-command
            goto-line
            scroll-down-command)))
#+END_SRC
** Initialize =Vertigo=
*** Description
Vertigo.el is a port of the vim vertigo plugin and gives commands for jumping up
and down by lines using the home row.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package vertigo
    :ensure t)
#+END_SRC
** Initialize =vertico=
*** Description
Vertico provides a performant and minimalistic vertical completion UI based on
the default completion system. The main focus of Vertico is to provide a UI
which behaves correctly under all circumstances.
*** Code
#+BEGIN_SRC emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  (use-package vertico
    :ensure t
    :init
    (vertico-mode 1)
    (vertico-mouse-mode 1)
    (vertico-multiform-mode 1)
    :bind
    (:map vertico-map
          ("TAB" . minibuffer-complete)
          ("M-v" . vertico-multiform-vertical)
          ("M-g" . vertico-multiform-grid)
          ("M-f" . vertico-multiform-flat)
          ("M-r" . vertico-multiform-reverse)
          ("M-u" . vertico-multiform-unobtrusive))
    :custom
    (vertico-scroll-margin 0)
    (vertico-count 20)
    (vertico-resize t)
    (vertico-cycle t))

  (use-package vertico-multiform
    :commands vertico-multiform-mode
    :after vertico
    :init
    (vertico-multiform-mode 1)
    :config
    (setq vertico-multiform-categories
          '((file reverse)
            (project-file reverse)
            (imenu buffer)
            (consult-location buffer)
            (consult-grep buffer)
            (minor-mode reverse)
            (xref-location reverse)
            (history reverse)
            (url reverse)
            (consult-compile-error reverse)
            (buffer flat (vertico-cycle . t))
            (t flat)))

    (setq vertico-multiform-commands
          '((dired-goto-file unobtrusive)
            (load-theme reverse)
            (execute-extended-command unobtrusive)
            (dired-goto-file flat)
            (consult-project-buffer flat)
            (consult-dir-maybe reverse)
            (consult-dir reverse)
            (consult-flymake reverse)
            (consult-history reverse)
            (consult-recent-file flat)
            (consult-completion-in-region reverse)
            (consult-recoll)
            (completion-at-point reverse)
            (consult-org-heading reverse)
            (consult-dff unobtrusive)
            (xref-find-definitions reverse))))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 5)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)
    (setq enable-recursive-minibuffers t))

#+END_SRC
** Initialize =cape=
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-symbol))

  ;; Shell completion
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
#+END_SRC
** Initialize =consult=
*** Description
Consult provides practical commands based on the Emacs completion function
completing-read.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t)

  (use-package consult-yasnippet
    :ensure t
    :defer t
    :after consult)

  (use-package consult-ag
    :ensure t
    :defer t
    :after consult)
#+END_SRC
** Initialize =embark=
** Initialize =orderless=
*** Description
This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
*** Code
#+BEGIN_SRC emacs-lisp
  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun first-initialism (pattern index _total)
    (if (= index 0) 'orderless-initialism))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (use-package orderless
    :ensure t
    :init
    ;; (dolist (styles '(substring orderless flex basic)) (add-to-list 'completion-styles styles))
    (setq completion-styles '(substring orderless flex basic))
    :custom
    (orderless-matching-styles '(orderless-flex
                                 orderless-prefixes
                                 orderless-literal))
    (orderless-style-dispatchers '(first-initialism
                                   flex-if-twiddle
                                   without-if-bang)))
#+END_SRC
** Built-in entry: =eldoc=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
** Built-in entry: =abbrev=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode)
#+END_SRC
* Programming section
** Initialize =company=
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :demand t
    :diminish company-mode
    :bind
    (:map company-mode-map
          ("<tab>" . company-indent-or-complete-common)
          :map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("SPC" . company-abort))
    :config
    (setq company-idle-delay nil
          company-minimum-prefix-length 3
          company-ctags-ignore-case t
          company-ctags-fuzzy-match-p t
          company-dabbrev-downcase nil
          company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case nil
          company-backends '((company-capf :with company-yasnippet) (company-ctags :with company-dabbrev) company-files)))

  (use-package company-quickhelp
    :ensure t
    :after company
    :hook (company-mode . company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 1))
#+END_SRC
** Initialize =aggressive-indent-mode=
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'c-mode-hook #'aggressive-indent-mode)
  (add-hook 'c++-mode-hook #'aggressive-indent-mode)
  (add-hook 'python-mode-hook #'aggressive-indent-mode)
  (add-to-list
   'aggressive-indent-dont-indent-if
   '(and (derived-mode-p 'c-mode)
         (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                             (thing-at-point 'line)))))
#+END_SRC
** Initialize =dumb-jump=
#+BEGIN_SRC emacs-lisp
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  (setq dumb-jump-git-grep-search-args "")

  ;; only force dumb-jump to use ripgrep if it exists on system
  (when (executable-find "ag")
    (progn
      (setq dumb-jump-force-searcher 'ag)
      (setq dumb-jump-prefer-searcher 'ag)
      (setq dumb-jump-ag-search-args "")))
#+END_SRC
** Initialize =eglot=
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :defer t
    :ensure t
    :diminish eglot
    :config
    (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
    (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
    (define-key eglot-mode-map (kbd "C-c h") 'eldoc))
#+END_SRC
** Initialize =yasnippet=
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

  (use-package yasnippet
    :ensure t
    :diminish yas
    :config
    (yas-reload-all)
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets")))
#+END_SRC
** Initialize =flycheck=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC
** C & C++
*** Description
Irony is the company backend for C and C++
*** Code
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook #'company-mode)
  (add-hook 'c-mode-hook #'eglot-ensure)
  (add-hook 'c-mode-hook #'yas-minor-mode)
  (add-hook 'c-mode-hook #'undo-hl-mode)
  (add-hook 'c-mode-hook #'wrap-region-mode)
  (add-hook 'c-mode-hook #'openbsd-set-knf-style)
  (add-hook 'c-mode-hook #'which-function-mode)
  (add-hook 'c-mode-hook #'flycheck-mode)

  (add-hook 'c++-mode-hook #'company-mode)
  (add-hook 'c++-mode-hook #'eglot-ensure)
  (add-hook 'c++-mode-hook #'yas-minor-mode)
  (add-hook 'c++-mode-hook #'undo-hl-mode)
  (add-hook 'c++-mode-hook #'wrap-region-mode)
  (add-hook 'c++-mode-hook #'openbsd-set-knf-style)
  (add-hook 'c++-mode-hook #'which-function-mode)
  (add-hook 'c++-mode-hook #'flycheck-mode)
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :defer t
    :ensure t
    :hook
    (go-mode . yas-minor-mode)
    (go-mode . company-mode)
    (go-mode . eglot-ensure)
    (go-mode . eglot-format-buffer-on-save)
    (go-mode . undo-hl-mode)
    (go-mode . wrap-region-mode))

  (defun project-find-go-module (dir)
    (when-let ((root (locate-dominating-file dir "go.mod")))
      (cons 'go-module root)))

  (cl-defmethod project-root ((project (head go-module)))
    (cdr project))

  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

  (setq-default eglot-workspace-configuration
                '((:gopls .
                          ((staticcheck . t)
                           (matcher . "CaseSensitive")))))

  (add-hook 'project-find-functions #'project-find-go-module)
#+END_SRC
** Java
*** Description
Also added google-java-format
*** Code
#+BEGIN_SRC emacs-lisp
  (defun ken_nc/java-format-on-save ()
    (when (eq major-mode 'java-mode)
      (let ((prev-pos (point)))
        (call-interactively 'google-java-format-buffer)
        (goto-char prev-pos))))

  (add-hook 'before-save-hook #'ken_nc/java-format-on-save)
  (add-hook 'java-mode-hook #'company-mode)
  (add-hook 'java-mode-hook #'google-set-c-style)
  (add-hook 'java-mode-hook #'yas-minor-mode)
  (add-hook 'java-mode-hook #'eglot-ensure)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  ;; Probably need to install abunch of pip packages
  (use-package pyvenv
    :ensure t
    :init
    (setenv "~/.venvs/")
    :config
    ;; (pyvenv-mode t)
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))

    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3.10")))))

  (use-package blacken
    :ensure t
    :config
    (setq-default blacken-allow-p36 t)
    (setq-default blacken-fast-unsafe t)
    (setq-default blacken-line-length 80)
    (setq-default blacken-skip-string-normalization t))

  (defun ken_nc/python-format-on-save ()
    (when (eq major-mode 'python-mode)
      (let ((prev-pos (point)))
        (call-interactively 'blacken-buffer)
        (goto-char prev-pos))))

  (add-hook 'before-save-hook #'ken_nc/python-format-on-save)

  (use-package python-mode
    :ensure t
    :custom
    (python-shell-interpreter "python3")
    :hook
    (python-mode . pyvenv-mode)
    (python-mode . flycheck-mode)
    (python-mode . company-mode)
    (python-mode . blacken-mode)
    (python-mode . yas-minor-mode)
    (python-mode . eglot-ensure))
#+END_SRC
** Elisp
*** Description
Company setup for emacs
*** Code
#+BEGIN_SRC emacs-lisp
  (defun ken_nc/elisp-base ()
    "Common configuration for elisp mode."
    ;; Company mode
    (with-eval-after-load 'company
      (setf company-backends '())
      (add-to-list 'company-backends 'company-ispell)
      (add-to-list 'company-backends 'company-files)
      (add-to-list 'company-backends '(company-capf :with company-dabbrev-code))
      (local-set-key (kbd "<tab>") #'company-indent-or-complete-common)))

  ;; Change a few indenting behaviors
  (put 'add-function 'lisp-indent-function 2)
  (put 'advice-add 'lisp-indent-function 2)
  (put 'plist-put 'lisp-indent-function 2)

  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook #'ken_nc/elisp-base)
#+END_SRC
** Scheme =geiser-mit=
*** Description
Collection of Emacs major and minor modes that work with scheme
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser-mit
    :defer t
    :diminish t
    :ensure t
    :config
    (add-hook 'geiser-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c C-b") 'geiser-eval-buffer-and-go)
                (local-set-key (kbd "C-x C-e") 'geiser-eval-region-and-go))))
#+END_SRC
** Ocaml
*** Description
Help editing OCaml code, to highlight important parts of the code, to run an OCaml REPL
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :ensure t
    :defer t
    :diminish t
    :bind
    (:map tuareg-mode-map
          ("<M-;>" . tuareg-comment-dwim))
    :hook
    (tuareg-mode . company-mode)
    (tuareg-mode . eglot-ensure)
    (tuareg-mode . undo-hl-mode)
    (tuareg-mode . wrap-region-mode)
    :config
    (setq tuareg-comment-show-paren t)
    (setq tuareg-highlight-all-operators t)
    (add-hook 'tuareg-mode-hook
              (lambda()
                (setq-local comment-style 'multi-line)
                (setq-local comment-continue "   "))))

  ;; (when (functionp 'prettify-symbols-mode)
  ;;   (prettify-symbols-mode))
#+END_SRC
** Highlight changes
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook #'highlight-changes-mode)
  (add-hook 'after-save-hook
            (lambda ()
              (when (highlight-changes-mode)
                (save-restriction
                  (widen)
                  (highlight-changes-remove-highlight (point-min) (point-max))))))
#+END_SRC
** Comment (mode?)
#+BEGIN_SRC emacs-lisp
  (defun ken_nc/automatic-commenting ()
    (setq-local comment-auto-fill-only-comments t)
    (setq-local auto-fill-mode t))
  (add-hook 'prog-mode-hook 'ken_nc/automatic-commenting)
#+END_SRC
** pcmpl-args
#+BEGIN_SRC emacs-lisp
  (use-package pcmpl-args
    :ensure t)
#+END_SRC
