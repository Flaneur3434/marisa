;;; hotfuzz-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from hotfuzz.el

(autoload 'hotfuzz-filter "hotfuzz" "\
Filter CANDIDATES that match STRING and sort by the match costs.
CANDIDATES should be a list of strings.

(fn STRING CANDIDATES)")
(autoload 'hotfuzz-all-completions "hotfuzz" "\
Get hotfuzz-completions of STRING in TABLE.
See `completion-all-completions' for the semantics of PRED and POINT.
This function prematurely sorts the completions; mutating the returned
list before passing it to `display-sort-function' or
`cycle-sort-function' will lead to inaccuracies.

(fn STRING TABLE PRED POINT)")
(put 'hotfuzz 'completion--adjust-metadata #'hotfuzz--adjust-metadata)
(add-to-list 'completion-styles-alist '(hotfuzz completion-flex-try-completion hotfuzz-all-completions "Fuzzy completion."))
(defvar hotfuzz-selectrum-mode nil "\
Non-nil if Hotfuzz-Selectrum mode is enabled.
See the `hotfuzz-selectrum-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `hotfuzz-selectrum-mode'.")
(custom-autoload 'hotfuzz-selectrum-mode "hotfuzz" nil)
(autoload 'hotfuzz-selectrum-mode "hotfuzz" "\
Minor mode that enables hotfuzz in Selectrum menus.

This is a global minor mode.  If called interactively, toggle the
`Hotfuzz-Selectrum mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='hotfuzz-selectrum-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar hotfuzz-vertico-mode nil "\
Non-nil if Hotfuzz-Vertico mode is enabled.
See the `hotfuzz-vertico-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `hotfuzz-vertico-mode'.")
(custom-autoload 'hotfuzz-vertico-mode "hotfuzz" nil)
(autoload 'hotfuzz-vertico-mode "hotfuzz" "\
Toggle Hotfuzz compatibility code for the Vertico completion system.

Contrary to what the name might suggest, this mode does not
automatically enable Hotfuzz. You still have to choose when it gets
used by customizing e.g. `completion-styles'.

This is a global minor mode.  If called interactively, toggle the
`Hotfuzz-Vertico mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='hotfuzz-vertico-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "hotfuzz" '("hotfuzz-"))

;;; End of scraped data

(provide 'hotfuzz-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; hotfuzz-autoloads.el ends here
